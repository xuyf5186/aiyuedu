<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.mapper.FriendMapper">
  <resultMap id="BaseResultMap" type="cn.entity.Friend">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="user_one_id" jdbcType="INTEGER" property="userOneId" />
    <result column="user_two_id" jdbcType="INTEGER" property="userTwoId" />
    <result column="created_at" jdbcType="TIMESTAMP" property="createdAt" />
    <result column="updated_at" jdbcType="TIMESTAMP" property="updatedAt" />
    <result column="deleted_at" jdbcType="TIMESTAMP" property="deletedAt" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, user_one_id, user_two_id, created_at, updated_at, deleted_at
  </sql>
  <select id="selectByExample" parameterType="cn.entity.FriendExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from friend
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from friend
    where id = #{id,jdbcType=INTEGER}
    and deleted_at is null
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from friend
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="cn.entity.FriendExample">
    delete from friend
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.entity.Friend">
    insert into friend (id, user_one_id, user_two_id, 
      created_at, updated_at, deleted_at
      )
    values (#{id,jdbcType=INTEGER}, #{userOneId,jdbcType=INTEGER}, #{userTwoId,jdbcType=INTEGER}, 
      #{createdAt,jdbcType=TIMESTAMP}, #{updatedAt,jdbcType=TIMESTAMP}, #{deletedAt,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="cn.entity.Friend">
    insert into friend
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="userOneId != null">
        user_one_id,
      </if>
      <if test="userTwoId != null">
        user_two_id,
      </if>
      <if test="createdAt != null">
        created_at,
      </if>
      <if test="updatedAt != null">
        updated_at,
      </if>
      <if test="deletedAt != null">
        deleted_at,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userOneId != null">
        #{userOneId,jdbcType=INTEGER},
      </if>
      <if test="userTwoId != null">
        #{userTwoId,jdbcType=INTEGER},
      </if>
      <if test="createdAt != null">
        #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null">
        #{updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="deletedAt != null">
        #{deletedAt,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.entity.FriendExample" resultType="java.lang.Long">
    select count(*) from friend
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update friend
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.userOneId != null">
        user_one_id = #{record.userOneId,jdbcType=INTEGER},
      </if>
      <if test="record.userTwoId != null">
        user_two_id = #{record.userTwoId,jdbcType=INTEGER},
      </if>
      <if test="record.createdAt != null">
        created_at = #{record.createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updatedAt != null">
        updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.deletedAt != null">
        deleted_at = #{record.deletedAt,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update friend
    set id = #{record.id,jdbcType=INTEGER},
      user_one_id = #{record.userOneId,jdbcType=INTEGER},
      user_two_id = #{record.userTwoId,jdbcType=INTEGER},
      created_at = #{record.createdAt,jdbcType=TIMESTAMP},
      updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
      deleted_at = #{record.deletedAt,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.entity.Friend">
    update friend
    <set>
      <if test="userOneId != null">
        user_one_id = #{userOneId,jdbcType=INTEGER},
      </if>
      <if test="userTwoId != null">
        user_two_id = #{userTwoId,jdbcType=INTEGER},
      </if>
      <if test="createdAt != null">
        created_at = #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null">
        updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="deletedAt != null">
        deleted_at = #{deletedAt,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.entity.Friend">
    update friend
    set user_one_id = #{userOneId,jdbcType=INTEGER},
      user_two_id = #{userTwoId,jdbcType=INTEGER},
      created_at = #{createdAt,jdbcType=TIMESTAMP},
      updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      deleted_at = #{deletedAt,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectFriends" parameterType="java.lang.Integer" resultType="cn.entity.FriendItem">
      select t2.*,message.content,message.type
      from message
      right join
        (select t1.id,t1.name,t1.avatar,max(message.created_at) as created_at
        from message
        right join
          (select friend.id,name,avatar
               from user,friend
               where friend.user_one_id=#{jdbcType.INTEGER}
               and user.id=friend.user_two_id
               and friend.deleted_at is null) as t1
        on t1.id=message.friend_id
        and message.deleted_at is null
        group by t1.id) as t2
      on message.friend_id=t2.id
      and message.created_at=t2.created_at
      UNION ALL
      select t2.*,message.content,message.type
      from message
      right join
        (select t1.id,t1.name,t1.avatar,max(message.created_at) as created_at
        from message
        right join
          (select friend.id,name,avatar
               from user,friend
               where friend.user_two_id=#{jdbcType.INTEGER}
               and user.id=friend.user_one_id
               and friend.deleted_at is null) as t1
        on t1.id=message.friend_id
        and message.deleted_at is null
        group by t1.id) as t2
      on message.friend_id=t2.id
      and message.created_at=t2.created_at
  </select>

</mapper>